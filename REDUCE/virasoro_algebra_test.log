Reduce (CSL, rev 6657), 10-Dec-2023 ...

1: in "D:\OneDrive\work\ConformalFieldTheory\REDUCE\virasoro_algebra.red";
on rat;


on div;



clear delta, c, h, x, z, tau, theta, l, vec, vecproj, gamma, vecf;


order h, c, x, z, theta, tau, l;


operator delta, l, vec, vecproj;


noncom l, vec, vec_proj, vecf;


factor l, vec, gamma, vecf;


let theta**2 = tau;


for all m let delta(m) = if m = 0 then 1 else 0;


for all m, n such that m > n let l(m)*l(n) = l(n)*l(m) + (m-n)*l(m+n) + c*(m**3-m)*delta(m+n)/12;


for all h let vec(h)**2 = 1;


for all m, n, h such that m > 0 let l(m)*vec(h) = 0;


for all m, n, h such that 0 > n let vec(h)*l(n) = 0;


for all h let l(0)*vec(h) = h*vec(h), vec(h)*l(0) = vec(h)*h;


let vecproj()**2 = 1;


for all m let vecproj()*l(m) = if m < -2 then 0 else if m = -1 then z1*vecproj() else z2*vecproj();


for all h, gamma, epsilon let vecf(h, gamma)*vecf(h, epsilon) = 1;


*** vecf declared operator 

for all m, h, gamma let l(m)*vecf(h, gamma) = -(-gamma + h*(m+1)) * vecf(h, gamma - m);



procedure commutator(x, y); x*y - y*x;


commutator


procedure centralcharge(tau); 6/tau + 13 + 6*tau;


centralcharge

procedure conformalweight(r, s, tau) = (1-r**2)/(4*tau) + (1-r*s)/2 + (1-s**2)/4*tau;


conformalweight

procedure cw(r, s, tau); conformalweight(r, s, tau);


cw


procedure partitions(n); begin
  if n < 0 then return {};
  if n = 0 then return {{}};
  if n = 1 then return {{1}};
  return append(
    for each p in partitions(n-1) collect 1 . p,
    for each p in partitions(n-1) join
      if length(p)=1 or first(p) < second(p) then {(first(p)+1) . rest(p)} else {}
  );
end;


partitions

    
procedure partnum(n); length(partitions(n));


partnum


procedure monomial(p); for each m in p product l(-m);


monomial

procedure monomials(d); for each p in partitions(d) collect monomial(p);


monomials

procedure dualmonomial(p); for each m in reverse(p) product l(m);


dualmonomial

procedure dualmonomials(d); for each p in partitions(d) collect dualmonomial(p);


dualmonomials


procedure kacmat(d); begin
  scalar basis_r := monomials(d);
  scalar basis_l := dualmonomials(d);
  scalar N := partnum(d);
  scalar j := 0;
  scalar k := 0;
  matrix kac_matrix(N, N);
  for each ll_r in basis_r do <<
    k := k + 1;
    for each ll_l in basis_l do <<
      j := j + 1;
      kac_matrix(j, k) := vec(h) * ll_l * ll_r * vec(h);
    >>;
    j := 0;
  >>;
  return kac_matrix;
end;


kacmat


procedure kacdet(d); begin
  kac_matrix := kacmat(d);
  return det(kac_matrix);
end;


kacdet


procedure kacdet_t(d, tau); sub(c = centralcharge(tau), kacdet(d));


kacdet_t


procedure kacdet_t_rhs(d, tau); begin
  return for r := 1:d product for s := 1:d product (h - cw(r, s, tau))^partnum(d - r*s);
end;


kacdet_t_rhs


procedure kacdet_fact(d, tau); begin
  scalar kd := kacdet_t(d, tau);
  return {num = factorize(num(kd)), den = den(kd)};
end;


kacdet_fact


procedure kacdet_sol(d, tau); begin
  scalar kd := kacdet_t(d, tau);
  return solve(kd, h)
end;


kacdet_sol


procedure lincomb(n); begin
  scalar j := -1;
  return for each ll in monomials(n) sum <<
    j := j + 1;
    if j = 0 then ll else mkid(x, j) * ll
  >>;
end;


lincomb


procedure ltoz(s, d); begin
  scalar ss := s;
  for m := 1:d do ss := (ss where l(-m) => mkid(z, m));
  return ss;
end;


ltoz


procedure allcoeffs(s, d); begin
  scalar sz := ltoz(s, d);
  scalar cs := coeff(sz, mkid(z, 1));
  for i := 2:d do
    (cs := for each f in cs join for each g in coeff(f, mkid(z, i)) join if g = 0 then {} else {g});
  return cs;
end;


allcoeffs


procedure solsingvec(r, s, tau); begin
  scalar d, sing, v1, s1, lineq1, v2, s2, lineq2, lineq, lineq_t, xs, sol;
  if r = 1 and s = 1 then return {{}};
  d := r*s;
  sing := lincomb(d);
  v1 := l(1)*sing*vec(h);
  s1 := ltoz(v1*vec(h), d);
  lineq1 := allcoeffs(s1, d);
  v2 := l(2)*sing*vec(h);
  s2 := ltoz(v2*vec(h), d);
  lineq2 := allcoeffs(s2, d);
  lineq := append(lineq1, lineq2);
  lineq_t := sub(c = centralcharge(tau), h = conformalweight(r, s, tau), lineq);
  xs := for i := 1:(length(partitions(d)) - 1) collect mkid(x, i);
  sol := solve(lineq_t, xs);
  return sol;
end;


solsingvec


procedure singvec(r, s, tau); begin
  scalar sing := lincomb(r*s);
  scalar sol := solsingvec(r, s, tau);
  return sub(first(sol), sing)
end;


singvec


procedure proj12(s); begin
  scalar sp := vecproj() * s;
  return vecproj() * sp;
end;


proj12


procedure proj12_fact(s); begin
  scalar sp := vecproj() * s;
  sp := vecproj() * sp;
  return {num = factorize(num(sp)), den = den(sp)};
end;


proj12_fact


procedure act_ff(s, h, gamma); begin
  scalar g := s * vecf(h, gamma);
  g := g * vecf(h, gamma);
  return g;
end;


act_ff


procedure g_ff(r, s, h, gamma, tau); begin
  scalar sing := singvec(r, s, tau);
  return act_ff(sing, h, gamma);
end;


g_ff


procedure g_ff_factor(k, l, a, b, h, gamma); begin
  return (gamma^2 
    + ((2*a*(k-a)+k)/theta^2 + (2*b*(l-b)+l)*theta^2 + k*l+k+l-(k-2*a)*(l-2*b)) * gamma
    + ((k-2*a)/theta + (l-2*b)*theta)^2 * h
    + (a/theta + b*theta) * ((a+1)/theta + (b+1)*theta) *
      ((k-a)/theta + (l-b)*theta) * ((k-a+1)/theta + (l-b+1)*theta)
  );
end;


g_ff_factor


procedure g_ff_factor_lhs(r0, s0, r1, s1, h2, i1, j1); begin
  scalar k := r1 - 1; 
  scalar l := s1 - 1; 
  scalar a := i1 - 1; 
  scalar b := j1 - 1;
  scalar h := cw(r0, s0, tau);
  scalar gamma := cw(r0, s0, tau) + cw(r1, s1, tau) - h2;
  return g_ff_factor(k, l, a, b, h, gamma);
end;


g_ff_factor_lhs


procedure g_ff_factor_rhs(r0, s0, r1, s1, h2, i1, j1); begin
  return (
    (h2 - cw(r0+r1+1-2*i1, s0+s1+1-2*j1, tau)) *
    (h2 - cw(r0-(r1+1-2*i1), s0-(s1+1-2*j1), tau))
  );
end;


g_ff_factor_rhs


procedure f_ff(r0, s0, r1, s1, h2, tau); begin
  scalar h0 := conformalweight(r0, s0, tau);
  scalar h1 := conformalweight(r1, s1, tau);
  return g_ff(r1, s1, h0, h0 + h1 - h2, tau);
end;


f_ff


procedure f_ff_rhs(r0, s0, r1, s1, h2, tau); begin
  return ((-1)^(r1*s1) *
    (for i1 := 1:r1 product for j1 := 1:s1 product h2 - cw(r0+r1+1-2*i1, s0+s1+1-2*j1, tau))
  );
end;


f_ff_rhs


procedure f_ff_fact(r0, s0, r1, s1, h2, tau); begin
  scalar f := f_ff(r0, s0, r1, s1, h2, tau);
  return {num = factorize(num(f)), den = den(f)};
end;


f_ff_fact


procedure f_ff_sol(r0, s0, r1, s1, h2, tau); begin
  scalar f := f_ff(r0, s0, r1, s1, h2, tau);
  return solve(f, h2);
end;


f_ff_sol


;

end;

2: in "D:\OneDrive\work\ConformalFieldTheory\REDUCE\virasoro_algebra_test.red";
operator O;


noncom O;


commutator(O(m), O(n));


o(m)*o(n) - o(n)*o(m)


commutator(L(0), L(-2));


2*l(-2)

commutator(L(0), L(-1));


l(-1)

commutator(L(0), L(0));


0

commutator(L(0), L(1));


 - l(1)

commutator(L(0), L(2));


 - 2*l(2)

commutator(L(1), L(-2));


3*l(-1)

commutator(L(1), L(-1));


2*l(0)

commutator(L(1), L(0));


l(1)

commutator(L(1), L(1));


0

commutator(L(1), L(2));


 - l(3)

commutator(L(2), L(-2));


          1
4*l(0) + ---*c
          2

commutator(L(2), L(-1));


3*l(1)

commutator(L(2), L(0));


2*l(2)

commutator(L(2), L(1));


l(3)

commutator(L(2), L(2));


0


L(-2)*vec(h);


l(-2)*vec(h)

L(-1)*vec(h);


l(-1)*vec(h)

L(0)*vec(h);


h*vec(h)

L(1)*vec(h);


0

L(2)*vec(h);


0


vec(h)*L(-2);


0

vec(h)*L(-1);


0

vec(h)*L(0);


h*vec(h)

vec(h)*L(1);


vec(h)*l(1)

vec(h)*L(2);


vec(h)*l(2)


vec(h)*vec(h);


1


centralcharge(tau);


   -1       2
tau  *(6*tau  + 13*tau + 6)

conformalweight(r, s, tau);


   -1      1     2  2    1     2    1             1         1   2    1
tau  *( - ---*tau *s  + ---*tau  - ---*tau*r*s + ---*tau - ---*r  + ---)
           4             4          2             2         4        4


partitions(5);


{{1,1,1,1,1},{1,1,1,2},{1,1,3},{1,2,2},{1,4},{2,3},{5}}

partnum(5);


7


monomial({1,1,2,3,3,3,4});


           3            2
l(-4)*l(-3) *l(-2)*l(-1)

monomials(5);


      5
{l(-1) ,

            3
 l(-2)*l(-1) ,

            2
 l(-3)*l(-1) ,

      2
 l(-2) *l(-1),

 l(-4)*l(-1),

 l(-3)*l(-2),

 l(-5)}

dualmonomial({1,1,2,3,3,3,4});


    2          3
l(1) *l(2)*l(3) *l(4)

dualmonomials(5);


     5
{l(1) ,

     3
 l(1) *l(2),

     2
 l(1) *l(3),

          2
 l(1)*l(2) ,

 l(1)*l(4),

 l(2)*l(3),

 l(5)}


kacmat(3);


[         2                                         ]
[24*h*(2*h  + 3*h + 1)  12*h*(3*h + 1)      24*h    ]
[                                                   ]
[   12*h*(3*h + 1)      h*(8*h + c + 8)     10*h    ]
[                                                   ]
[        24*h                10*h        2*(3*h + c)]


kacdet(3);


    2      4       3          3      2  2      2          2        2
48*h *(48*h  + 22*h *c - 142*h  + 2*h *c  - 5*h *c + 102*h  + 3*h*c  - 13*h*c

                  2
        - 20*h + c  + 2*c)

kacdet_t(3, tau);


       -2  2      4    2       3    3       3    2       3           2    4
144*tau  *h *(16*h *tau  + 44*h *tau  + 48*h *tau  + 44*h *tau + 24*h *tau

                     2    3        2    2       2           2           4
               + 94*h *tau  + 173*h *tau  + 94*h *tau + 24*h  + 36*h*tau

                          3            2                            4         3
               + 130*h*tau  + 178*h*tau  + 130*h*tau + 36*h + 12*tau  + 56*tau

                       2
               + 89*tau  + 56*tau + 12)

kacdet_fact(3, tau);


{num={{144,1},

      {4*h*tau + 2*tau + 3,1},

      {h*tau + tau + 2,1},

      {4*h + 3*tau + 2,1},

      {h + 2*tau + 1,1},

      {h,2}},

        2
 den=tau }

kacdet_sol(3, tau);


{h=0,

     - tau - 2
 h=------------,
       tau

 h= - 2*tau - 1,

     - 2*tau - 3
 h=--------------,
       4*tau

     - 3*tau - 2
 h=--------------}
         4


kd_rhs := kacdet_t_rhs(3, tau);


             -2  2   4    2    11   3    3      3    2    11   3
kd_rhs := tau  *h *(h *tau  + ----*h *tau  + 3*h *tau  + ----*h *tau
                               4                          4

                 3   2    4    47   2    3    173   2    2    47   2
              + ---*h *tau  + ----*h *tau  + -----*h *tau  + ----*h *tau
                 2             8              16              8

                 3   2    9       4    65       3    89       2    65
              + ---*h  + ---*h*tau  + ----*h*tau  + ----*h*tau  + ----*h*tau
                 2        4            8             8             8

                 9       3     4    7     3    89     2    7         3
              + ---*h + ---*tau  + ---*tau  + ----*tau  + ---*tau + ---)
                 4       4          2          16          2         4

kacdet_t(3, tau) / kd_rhs;


2304

{num = factorize(num(kd_rhs)), den = den(kd_rhs)};


{num={{4*h*tau + 2*tau + 3,1},

      {h*tau + tau + 2,1},

      {4*h + 3*tau + 2,1},

      {h + 2*tau + 1,1},

      {h,2}},

           2
 den=16*tau }

solve(kd_rhs, h);


{h=0,

      -1
 h=tau  *( - tau - 2),

 h= - 2*tau - 1,

      -1      1         3
 h=tau  *( - ---*tau - ---),
              2         4

       3         1
 h= - ---*tau - ---}
       4         2


lincomb(4);


     4           2                 2
l(-1)  + x3*l(-2)  + x1*l(-2)*l(-1)  + x2*l(-3)*l(-1) + x4*l(-4)

ltoz(lincomb(4), 4);


     2                      2             4
x1*z1 *z2 + x2*z1*z3 + x3*z2  + x4*z4 + z1

allcoeffs(lincomb(4), 4);


{x4,x3,x2,x1,1}

solsingvec(2, 2, tau);


           2
      2*tau  + 2
{{x1=------------,
         tau

           2
      2*tau  + 6*tau + 2
  x2=--------------------,
             tau

         4        2
      tau  - 2*tau  + 1
  x3=-------------------,
               2
            tau

           2
      3*tau  + 6*tau + 3
  x4=--------------------}}
             tau

singvec(2, 2, tau);


     4      -2      2     4        2             -1            2     2
l(-1)  + tau  *l(-2) *(tau  - 2*tau  + 1) + 2*tau  *l(-2)*l(-1) *(tau  + 1)

        -1                 2                     -1           2
 + 2*tau  *l(-3)*l(-1)*(tau  + 3*tau + 1) + 3*tau  *l(-4)*(tau  + 2*tau + 1)


proj12(singvec(2, 2, tau));


   -2     4   2        3   2         2   4        2   2           2        2
tau  *(tau *z2  + 2*tau *z1 *z2 + tau *z1  - 2*tau *z2  + 2*tau*z1 *z2 + z2 )

proj12_fact(singvec(2, 2, tau));


          2            2
{num={{tau *z2 + tau*z1  + 2*tau*z2 + z2,1},

          2            2
      {tau *z2 + tau*z1  - 2*tau*z2 + z2,1}},

        2
 den=tau }


proj12_fact(singvec(1, 1, tau));


{num={{z1,1}},den=1}

proj12_fact(singvec(1, 2, tau));


                  2
{num={{tau*z2 + z1 ,1}},den=1}

proj12_fact(singvec(1, 3, tau));


                    2
{num={{4*tau*z2 + z1 ,1},{z1,1}},den=1}

proj12_fact(singvec(1, 4, tau));


                    2                2
{num={{9*tau*z2 + z1 ,1},{tau*z2 + z1 ,1}},den=1}

proj12_fact(singvec(1, 5, tau));


                     2                  2
{num={{16*tau*z2 + z1 ,1},{4*tau*z2 + z1 ,1},{z1,1}},

 den=1}

proj12_fact(singvec(1, 6, tau));


                     2
{num={{25*tau*z2 + z1 ,1},

                    2
      {9*tau*z2 + z1 ,1},

                  2
      {tau*z2 + z1 ,1}},

 den=1}

proj12_fact(singvec(1, 7, tau));


                     2
{num={{36*tau*z2 + z1 ,1},

                     2
      {16*tau*z2 + z1 ,1},

                    2
      {4*tau*z2 + z1 ,1},

      {z1,1}},

 den=1}


act_ff(l(-3), h0, h0+h1-h2);


3*h0 + h1 - h2

factorize(act_ff(l(-2)*l(-1), h0, h0+h1-h2));


{{2*h0 + h1 - h2 + 1,1},{h0 + h1 - h2,1}}

factorize(act_ff(l(-1)^3, h0, h0+h1-h2));


{{h0 + h1 - h2 + 2,1},

 {h0 + h1 - h2 + 1,1},

 {h0 + h1 - h2,1}}


g_ff(2, 2, cw(1, 1, tau), cw(1, 1, tau) + cw(2, 2, tau) + h2, tau);


   -4    9      8    3      7       3      7    1     6   2    1     6
tau  *(-----*tau  + ----*tau *h2 + ----*tau  - ---*tau *h2  + ---*tau *h2
        256          16             16          8              2

           15     6      5   3      5   2    3      5       3      5      4   4
        + ----*tau  - tau *h2  - tau *h2  - ----*tau *h2 - ----*tau  + tau *h2
           64                                16             16

           3     4   2      4       69      4      3   3      3   2
        - ---*tau *h2  - tau *h2 - -----*tau  - tau *h2  - tau *h2
           4                        128

           3      3       3      3    1     2   2    1     2       15     2
        - ----*tau *h2 - ----*tau  - ---*tau *h2  + ---*tau *h2 + ----*tau
           16             16          8              2             64

           3             3           9
        + ----*tau*h2 + ----*tau + -----)
           16            16         256


solve(g_ff_factor_lhs(r0, s0, r1, s1, h2, i1, j1), h2);


       -1        2   2      2            2            2       1     2   2
{h2=tau  *( - tau *j1  + tau *j1*s0 + tau *j1*s1 + tau *j1 - ---*tau *s0
                                                              4

               1     2          1     2       1     2   2    1     2
            - ---*tau *s0*s1 - ---*tau *s0 - ---*tau *s1  - ---*tau *s1
               2                2             4              2

            - 2*tau*i1*j1 + tau*i1*s0 + tau*i1*s1 + tau*i1 + tau*j1*r0

                                    1               1               1
            + tau*j1*r1 + tau*j1 - ---*tau*r0*s0 - ---*tau*r0*s1 - ---*tau*r0
                                    2               2               2

               1               1               1            1
            - ---*tau*r1*s0 - ---*tau*r1*s1 - ---*tau*r1 - ---*tau*s0
               2               2               2            2

               1             2                         1    2    1
            - ---*tau*s1 - i1  + i1*r0 + i1*r1 + i1 - ---*r0  - ---*r0*r1
               2                                       4         2

               1        1    2    1
            - ---*r0 - ---*r1  - ---*r1),
               2        4         2

       -1        2   2      2            2            2       1     2   2
 h2=tau  *( - tau *j1  - tau *j1*s0 + tau *j1*s1 + tau *j1 - ---*tau *s0
                                                              4

               1     2          1     2       1     2   2    1     2
            + ---*tau *s0*s1 + ---*tau *s0 - ---*tau *s1  - ---*tau *s1
               2                2             4              2

            - 2*tau*i1*j1 - tau*i1*s0 + tau*i1*s1 + tau*i1 - tau*j1*r0

                                    1               1               1
            + tau*j1*r1 + tau*j1 - ---*tau*r0*s0 + ---*tau*r0*s1 + ---*tau*r0
                                    2               2               2

               1               1               1            1
            + ---*tau*r1*s0 - ---*tau*r1*s1 - ---*tau*r1 + ---*tau*s0
               2               2               2            2

               1             2                         1    2    1
            - ---*tau*s1 - i1  - i1*r0 + i1*r1 + i1 - ---*r0  + ---*r0*r1
               2                                       4         2

               1        1    2    1
            + ---*r0 - ---*r1  - ---*r1)}
               2        4         2

solve(g_ff_factor_rhs(r0, s0, r1, s1, h2, i1, j1), h2);


       -1        2   2      2            2            2       1     2   2
{h2=tau  *( - tau *j1  + tau *j1*s0 + tau *j1*s1 + tau *j1 - ---*tau *s0
                                                              4

               1     2          1     2       1     2   2    1     2
            - ---*tau *s0*s1 - ---*tau *s0 - ---*tau *s1  - ---*tau *s1
               2                2             4              2

            - 2*tau*i1*j1 + tau*i1*s0 + tau*i1*s1 + tau*i1 + tau*j1*r0

                                    1               1               1
            + tau*j1*r1 + tau*j1 - ---*tau*r0*s0 - ---*tau*r0*s1 - ---*tau*r0
                                    2               2               2

               1               1               1            1
            - ---*tau*r1*s0 - ---*tau*r1*s1 - ---*tau*r1 - ---*tau*s0
               2               2               2            2

               1             2                         1    2    1
            - ---*tau*s1 - i1  + i1*r0 + i1*r1 + i1 - ---*r0  - ---*r0*r1
               2                                       4         2

               1        1    2    1
            - ---*r0 - ---*r1  - ---*r1),
               2        4         2

       -1        2   2      2            2            2       1     2   2
 h2=tau  *( - tau *j1  - tau *j1*s0 + tau *j1*s1 + tau *j1 - ---*tau *s0
                                                              4

               1     2          1     2       1     2   2    1     2
            + ---*tau *s0*s1 + ---*tau *s0 - ---*tau *s1  - ---*tau *s1
               2                2             4              2

            - 2*tau*i1*j1 - tau*i1*s0 + tau*i1*s1 + tau*i1 - tau*j1*r0

                                    1               1               1
            + tau*j1*r1 + tau*j1 - ---*tau*r0*s0 + ---*tau*r0*s1 + ---*tau*r0
                                    2               2               2

               1               1               1            1
            + ---*tau*r1*s0 - ---*tau*r1*s1 - ---*tau*r1 + ---*tau*s0
               2               2               2            2

               1             2                         1    2    1
            - ---*tau*s1 - i1  - i1*r0 + i1*r1 + i1 - ---*r0  + ---*r0*r1
               2                                       4         2

               1        1    2    1
            + ---*r0 - ---*r1  - ---*r1)}
               2        4         2

g_ff_factor_lhs(r0, s0, r1, s1, h2, i1, j1) / g_ff_factor_rhs(r0, s0, r1, s1, h2, i1, j1);


1


f_ff(1, 1, 2, 2, h2, tau);


   -4    9      8    3      7       3      7    1     6   2    1     6
tau  *(-----*tau  - ----*tau *h2 + ----*tau  - ---*tau *h2  - ---*tau *h2
        256          16             16          8              2

           15     6      5   3      5   2    3      5       3      5      4   4
        + ----*tau  + tau *h2  - tau *h2  + ----*tau *h2 - ----*tau  + tau *h2
           64                                16             16

           3     4   2      4       69      4      3   3      3   2
        - ---*tau *h2  + tau *h2 - -----*tau  + tau *h2  - tau *h2
           4                        128

           3      3       3      3    1     2   2    1     2       15     2
        + ----*tau *h2 - ----*tau  - ---*tau *h2  - ---*tau *h2 + ----*tau
           16             16          8              2             64

           3             3           9
        - ----*tau*h2 + ----*tau + -----)
           16            16         256

f_ff_fact(1, 1, 2, 2, h2, tau);


                       2
{num={{4*h2*tau + 3*tau  + 6*tau + 3,1},

                       2
      {4*h2*tau + 3*tau  - 2*tau - 1,1},

                     2
      {4*h2*tau - tau  - 2*tau + 3,1},

                     2
      {4*h2*tau - tau  - 2*tau - 1,1}},

            4
 den=256*tau }

f_ff_sol(1, 1, 2, 2, h2, tau);


        2
     tau  + 2*tau + 1
{h2=------------------,
          4*tau

        2
     tau  + 2*tau - 3
 h2=------------------,
          4*tau

             2
      - 3*tau  + 2*tau + 1
 h2=-----------------------,
             4*tau

             2
      - 3*tau  - 6*tau - 3
 h2=-----------------------}
             4*tau


f_rhs := f_ff_rhs(1, 1, 2, 2, h2, tau);


            -4    9      8    3      7       3      7    1     6   2
f_rhs := tau  *(-----*tau  - ----*tau *h2 + ----*tau  - ---*tau *h2
                 256          16             16          8

                    1     6       15     6      5   3      5   2    3      5
                 - ---*tau *h2 + ----*tau  + tau *h2  - tau *h2  + ----*tau *h2
                    2             64                                16

                    3      5      4   4    3     4   2      4       69      4
                 - ----*tau  + tau *h2  - ---*tau *h2  + tau *h2 - -----*tau
                    16                     4                        128

                      3   3      3   2    3      3       3      3    1     2   2
                 + tau *h2  - tau *h2  + ----*tau *h2 - ----*tau  - ---*tau *h2
                                          16             16          8

                    1     2       15     2    3             3           9
                 - ---*tau *h2 + ----*tau  - ----*tau*h2 + ----*tau + -----)
                    2             64          16            16         256

f_ff(1, 1, 2, 2, h2, tau) / f_rhs;


1

{num = factorize(num(f_rhs)), den = den(f_rhs)};


                       2
{num={{4*h2*tau + 3*tau  + 6*tau + 3,1},

                       2
      {4*h2*tau + 3*tau  - 2*tau - 1,1},

                     2
      {4*h2*tau - tau  - 2*tau + 3,1},

                     2
      {4*h2*tau - tau  - 2*tau - 1,1}},

            4
 den=256*tau }

solve(f_rhs, h2);


       -1   1     2    1         1
{h2=tau  *(---*tau  + ---*tau + ---),
            4          2         4

       -1   1     2    1         3
 h2=tau  *(---*tau  + ---*tau - ---),
            4          2         4

       -1      3     2    1         1
 h2=tau  *( - ---*tau  + ---*tau + ---),
               4          2         4

       -1      3     2    3         3
 h2=tau  *( - ---*tau  - ---*tau - ---)}
               4          2         4


f_ff(2, 1, 1, 1, h2, tau) / f_ff_rhs(2, 1, 1, 1, h2, tau);


1

f_ff(2, 2, 1, 2, h2, tau) / f_ff_rhs(2, 2, 1, 2, h2, tau);


1

f_ff(3, 2, 2, 3, h2, tau) / f_ff_rhs(3, 2, 2, 3, h2, tau);


1

f_ff(2, 1, 2, 4, h2, tau) / f_ff_rhs(2, 1, 2, 4, h2, tau);


1

f_ff(1, 1, 3, 3, h2, tau) / f_ff_rhs(1, 1, 3, 3, h2, tau);


1

f_ff(1, 2, 3, 3, h2, tau) / f_ff_rhs(1, 2, 3, 3, h2, tau);


1

f_ff(2, 2, 4, 2, h2, tau) / f_ff_rhs(2, 2, 4, 2, h2, tau);


1


;

end;

3: 